{"task_id": "677", "split": "train", "entry_point": "validity_triangle", "prompt": "def validity_triangle(a,b,c):\nWrite a function to check if the triangle is valid or not.", "prompt_cot": "def validity_triangle(a,b,c):\nWrite a function to check if the triangle is valid or not.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `validity_triangle` — no comments, no prints, no tests.", "prompt_self_planning": "def validity_triangle(a,b,c):\nWrite a function to check if the triangle is valid or not.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `validity_triangle` — no comments, no prints, no tests.", "tests": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True\nassert validity_triangle(57, 45, 88) == False\nassert validity_triangle(55, 54, 94) == False\nassert validity_triangle(62, 45, 85) == False\nassert validity_triangle(64, 45, 87) == False\nassert validity_triangle(55, 50, 86) == False\nassert validity_triangle(64, 55, 95) == False\nassert validity_triangle(56, 55, 90) == False\nassert validity_triangle(57, 47, 95) == False\nassert validity_triangle(56, 53, 85) == False\nassert validity_triangle(58, 52, 95) == False\nassert validity_triangle(58, 45, 89) == False\nassert validity_triangle(56, 51, 92) == False\nassert validity_triangle(57, 49, 92) == False\nassert validity_triangle(58, 51, 91) == False\nassert validity_triangle(61, 51, 87) == False\nassert validity_triangle(63, 53, 85) == False\nassert validity_triangle(62, 45, 90) == False\nassert validity_triangle(63, 51, 94) == False\nassert validity_triangle(55, 46, 94) == False\nassert validity_triangle(59, 45, 85) == False\nassert validity_triangle(63, 54, 88) == False\nassert validity_triangle(55, 49, 94) == False\nassert validity_triangle(64, 55, 87) == False\nassert validity_triangle(58, 48, 87) == False\nassert validity_triangle(58, 46, 87) == False\nassert validity_triangle(63, 48, 92) == False\nassert validity_triangle(55, 55, 93) == False\nassert validity_triangle(61, 49, 94) == False\nassert validity_triangle(56, 54, 92) == False\nassert validity_triangle(64, 54, 88) == False\nassert validity_triangle(55, 54, 91) == False\nassert validity_triangle(58, 45, 93) == False\nassert validity_triangle(58, 52, 91) == False\nassert validity_triangle(42, 70, 58) == False\nassert validity_triangle(49, 78, 65) == False\nassert validity_triangle(41, 70, 57) == False\nassert validity_triangle(45, 73, 65) == False\nassert validity_triangle(47, 74, 62) == False\nassert validity_triangle(43, 73, 61) == False\nassert validity_triangle(40, 79, 65) == False\nassert validity_triangle(50, 74, 65) == False\nassert validity_triangle(50, 78, 57) == False\nassert validity_triangle(48, 77, 62) == False\nassert validity_triangle(40, 70, 65) == False\nassert validity_triangle(44, 70, 59) == False\nassert validity_triangle(50, 75, 63) == False\nassert validity_triangle(47, 80, 58) == False\nassert validity_triangle(49, 77, 56) == False\nassert validity_triangle(50, 73, 63) == False\nassert validity_triangle(42, 75, 62) == False\nassert validity_triangle(46, 80, 63) == False\nassert validity_triangle(41, 80, 61) == False\nassert validity_triangle(44, 74, 56) == False\nassert validity_triangle(48, 78, 62) == False\nassert validity_triangle(49, 72, 65) == False\nassert validity_triangle(45, 71, 63) == False\nassert validity_triangle(41, 71, 62) == False\nassert validity_triangle(44, 73, 56) == False\nassert validity_triangle(43, 73, 60) == False\nassert validity_triangle(48, 75, 59) == False\nassert validity_triangle(49, 74, 57) == True\nassert validity_triangle(44, 78, 57) == False\nassert validity_triangle(44, 73, 60) == False\nassert validity_triangle(41, 73, 65) == False\nassert validity_triangle(40, 79, 58) == False\nassert validity_triangle(44, 77, 63) == False\nassert validity_triangle(33, 46, 100) == False\nassert validity_triangle(33, 50, 105) == False\nassert validity_triangle(30, 54, 103) == False\nassert validity_triangle(32, 50, 96) == False\nassert validity_triangle(31, 52, 99) == False\nassert validity_triangle(28, 48, 102) == False\nassert validity_triangle(33, 51, 99) == False\nassert validity_triangle(30, 49, 102) == False\nassert validity_triangle(35, 53, 95) == False\nassert validity_triangle(33, 46, 101) == True\nassert validity_triangle(25, 46, 102) == False\nassert validity_triangle(31, 55, 101) == False\nassert validity_triangle(33, 54, 99) == False\nassert validity_triangle(29, 48, 97) == False\nassert validity_triangle(30, 50, 95) == False\nassert validity_triangle(26, 49, 103) == False\nassert validity_triangle(29, 53, 96) == False\nassert validity_triangle(35, 48, 96) == False\nassert validity_triangle(26, 47, 98) == False\nassert validity_triangle(28, 55, 98) == False\nassert validity_triangle(27, 47, 104) == False\nassert validity_triangle(25, 49, 101) == False\nassert validity_triangle(25, 54, 98) == False\nassert validity_triangle(27, 45, 104) == False\nassert validity_triangle(27, 46, 103) == False\nassert validity_triangle(26, 48, 97) == False\nassert validity_triangle(28, 54, 97) == False\nassert validity_triangle(31, 53, 99) == False\nassert validity_triangle(30, 50, 98) == False\nassert validity_triangle(35, 49, 101) == False\nassert validity_triangle(27, 47, 102) == False\nassert validity_triangle(27, 47, 99) == False\nassert validity_triangle(31, 52, 101) == False", "solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"}
{"task_id": "54", "split": "train", "entry_point": "counting_sort", "prompt": "def counting_sort(my_list):\nWrite a function to sort the given array by using counting sort.", "prompt_cot": "def counting_sort(my_list):\nWrite a function to sort the given array by using counting sort.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `counting_sort` — no comments, no prints, no tests.", "prompt_self_planning": "def counting_sort(my_list):\nWrite a function to sort the given array by using counting sort.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `counting_sort` — no comments, no prints, no tests.", "tests": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]\nassert counting_sort([5, 18, 8, 3, 7, 11, 11]) == [3, 5, 7, 8, 11, 11, 18]\nassert counting_sort([2, 23, 5, 7, 7, 9, 10]) == [2, 5, 7, 7, 9, 10, 23]\nassert counting_sort([2, 23, 7, 4, 11, 12, 8]) == [2, 4, 7, 8, 11, 12, 23]\nassert counting_sort([3, 26, 6, 9, 5, 12, 10]) == [3, 5, 6, 9, 10, 12, 26]\nassert counting_sort([3, 27, 3, 7, 6, 9, 9]) == [3, 3, 6, 7, 9, 9, 27]\nassert counting_sort([2, 18, 9, 10, 9, 12, 6]) == [2, 6, 9, 9, 10, 12, 18]\nassert counting_sort([5, 24, 2, 8, 2, 8, 3]) == [2, 2, 3, 5, 8, 8, 24]\nassert counting_sort([1, 21, 9, 7, 4, 5, 11]) == [1, 4, 5, 7, 9, 11, 21]\nassert counting_sort([3, 19, 6, 5, 2, 5, 11]) == [2, 3, 5, 5, 6, 11, 19]\nassert counting_sort([1, 22, 4, 9, 7, 4, 4]) == [1, 4, 4, 4, 7, 9, 22]\nassert counting_sort([2, 21, 9, 4, 6, 3, 9]) == [2, 3, 4, 6, 9, 9, 21]\nassert counting_sort([6, 25, 8, 2, 6, 10, 7]) == [2, 6, 6, 7, 8, 10, 25]\nassert counting_sort([3, 26, 6, 8, 5, 2, 7]) == [2, 3, 5, 6, 7, 8, 26]\nassert counting_sort([5, 18, 8, 2, 8, 3, 5]) == [2, 3, 5, 5, 8, 8, 18]\nassert counting_sort([5, 22, 8, 3, 4, 12, 5]) == [3, 4, 5, 5, 8, 12, 22]\nassert counting_sort([3, 20, 3, 8, 6, 10, 13]) == [3, 3, 6, 8, 10, 13, 20]\nassert counting_sort([6, 23, 7, 1, 1, 10, 11]) == [1, 1, 6, 7, 10, 11, 23]\nassert counting_sort([4, 28, 7, 3, 11, 12, 11]) == [3, 4, 7, 11, 11, 12, 28]\nassert counting_sort([4, 28, 9, 3, 4, 4, 5]) == [3, 4, 4, 4, 5, 9, 28]\nassert counting_sort([6, 24, 7, 1, 10, 11, 9]) == [1, 6, 7, 9, 10, 11, 24]\nassert counting_sort([3, 23, 6, 1, 11, 11, 6]) == [1, 3, 6, 6, 11, 11, 23]\nassert counting_sort([3, 18, 9, 8, 2, 2, 7]) == [2, 2, 3, 7, 8, 9, 18]\nassert counting_sort([6, 21, 5, 4, 4, 9, 11]) == [4, 4, 5, 6, 9, 11, 21]\nassert counting_sort([4, 21, 1, 7, 6, 5, 5]) == [1, 4, 5, 5, 6, 7, 21]\nassert counting_sort([3, 21, 1, 6, 8, 4, 13]) == [1, 3, 4, 6, 8, 13, 21]\nassert counting_sort([2, 23, 8, 9, 1, 6, 12]) == [1, 2, 6, 8, 9, 12, 23]\nassert counting_sort([4, 19, 8, 9, 8, 11, 10]) == [4, 8, 8, 9, 10, 11, 19]\nassert counting_sort([3, 27, 8, 5, 2, 6, 13]) == [2, 3, 5, 6, 8, 13, 27]\nassert counting_sort([4, 20, 3, 7, 8, 10, 7]) == [3, 4, 7, 7, 8, 10, 20]\nassert counting_sort([4, 28, 4, 9, 1, 12, 12]) == [1, 4, 4, 9, 12, 12, 28]\nassert counting_sort([4, 22, 3, 4, 3, 10, 5]) == [3, 3, 4, 4, 5, 10, 22]\nassert counting_sort([6, 20, 1, 5, 3, 9, 10]) == [1, 3, 5, 6, 9, 10, 20]\nassert counting_sort([5, 24, 5, 10, 8, 12, 7]) == [5, 5, 7, 8, 10, 12, 24]\nassert counting_sort([15, 7, 25, 28, 68, 46]) == [7, 15, 25, 28, 46, 68]\nassert counting_sort([14, 10, 26, 30, 71, 41]) == [10, 14, 26, 30, 41, 71]\nassert counting_sort([7, 6, 30, 38, 69, 45]) == [6, 7, 30, 38, 45, 69]\nassert counting_sort([17, 13, 27, 28, 67, 40]) == [13, 17, 27, 28, 40, 67]\nassert counting_sort([8, 4, 23, 29, 71, 42]) == [4, 8, 23, 29, 42, 71]\nassert counting_sort([17, 6, 23, 38, 66, 50]) == [6, 17, 23, 38, 50, 66]\nassert counting_sort([13, 12, 28, 32, 69, 44]) == [12, 13, 28, 32, 44, 69]\nassert counting_sort([13, 13, 26, 37, 66, 41]) == [13, 13, 26, 37, 41, 66]\nassert counting_sort([14, 12, 31, 34, 73, 50]) == [12, 14, 31, 34, 50, 73]\nassert counting_sort([13, 6, 27, 29, 64, 42]) == [6, 13, 27, 29, 42, 64]\nassert counting_sort([12, 13, 27, 32, 71, 40]) == [12, 13, 27, 32, 40, 71]\nassert counting_sort([14, 5, 32, 36, 73, 47]) == [5, 14, 32, 36, 47, 73]\nassert counting_sort([15, 7, 27, 34, 71, 42]) == [7, 15, 27, 34, 42, 71]\nassert counting_sort([13, 8, 27, 35, 74, 44]) == [8, 13, 27, 35, 44, 74]\nassert counting_sort([8, 9, 29, 30, 64, 44]) == [8, 9, 29, 30, 44, 64]\nassert counting_sort([8, 10, 30, 32, 65, 41]) == [8, 10, 30, 32, 41, 65]\nassert counting_sort([13, 8, 24, 30, 74, 47]) == [8, 13, 24, 30, 47, 74]\nassert counting_sort([10, 6, 31, 38, 64, 48]) == [6, 10, 31, 38, 48, 64]\nassert counting_sort([8, 13, 24, 28, 67, 45]) == [8, 13, 24, 28, 45, 67]\nassert counting_sort([8, 8, 23, 30, 67, 42]) == [8, 8, 23, 30, 42, 67]\nassert counting_sort([13, 11, 28, 38, 64, 42]) == [11, 13, 28, 38, 42, 64]\nassert counting_sort([15, 13, 31, 29, 71, 48]) == [13, 15, 29, 31, 48, 71]\nassert counting_sort([13, 14, 32, 29, 72, 44]) == [13, 14, 29, 32, 44, 72]\nassert counting_sort([12, 10, 29, 32, 70, 47]) == [10, 12, 29, 32, 47, 70]\nassert counting_sort([9, 8, 32, 35, 74, 49]) == [8, 9, 32, 35, 49, 74]\nassert counting_sort([9, 11, 23, 30, 74, 43]) == [9, 11, 23, 30, 43, 74]\nassert counting_sort([8, 12, 32, 33, 66, 42]) == [8, 12, 32, 33, 42, 66]\nassert counting_sort([17, 14, 29, 32, 72, 45]) == [14, 17, 29, 32, 45, 72]\nassert counting_sort([10, 14, 28, 31, 64, 50]) == [10, 14, 28, 31, 50, 64]\nassert counting_sort([17, 7, 29, 38, 69, 48]) == [7, 17, 29, 38, 48, 69]\nassert counting_sort([8, 9, 30, 38, 71, 50]) == [8, 9, 30, 38, 50, 71]\nassert counting_sort([17, 13, 23, 37, 72, 46]) == [13, 17, 23, 37, 46, 72]\nassert counting_sort([17, 10, 31, 33, 74, 50]) == [10, 17, 31, 33, 50, 74]\nassert counting_sort([11, 1, 14, 4, 6, 2]) == [1, 2, 4, 6, 11, 14]\nassert counting_sort([11, 6, 14, 5, 7, 2]) == [2, 5, 6, 7, 11, 14]\nassert counting_sort([11, 1, 16, 1, 1, 6]) == [1, 1, 1, 6, 11, 16]\nassert counting_sort([12, 2, 15, 8, 6, 4]) == [2, 4, 6, 8, 12, 15]\nassert counting_sort([8, 8, 11, 3, 7, 4]) == [3, 4, 7, 8, 8, 11]\nassert counting_sort([12, 5, 12, 1, 3, 3]) == [1, 3, 3, 5, 12, 12]\nassert counting_sort([6, 8, 10, 4, 2, 3]) == [2, 3, 4, 6, 8, 10]\nassert counting_sort([6, 9, 12, 3, 7, 1]) == [1, 3, 6, 7, 9, 12]\nassert counting_sort([3, 4, 17, 8, 3, 3]) == [3, 3, 3, 4, 8, 17]\nassert counting_sort([11, 9, 13, 5, 3, 6]) == [3, 5, 6, 9, 11, 13]\nassert counting_sort([3, 9, 11, 4, 7, 4]) == [3, 4, 4, 7, 9, 11]\nassert counting_sort([5, 7, 11, 8, 3, 4]) == [3, 4, 5, 7, 8, 11]\nassert counting_sort([3, 9, 18, 4, 2, 5]) == [2, 3, 4, 5, 9, 18]\nassert counting_sort([8, 8, 9, 8, 4, 5]) == [4, 5, 8, 8, 8, 9]\nassert counting_sort([6, 6, 18, 3, 6, 1]) == [1, 3, 6, 6, 6, 18]\nassert counting_sort([4, 5, 19, 4, 5, 6]) == [4, 4, 5, 5, 6, 19]\nassert counting_sort([9, 6, 12, 8, 7, 3]) == [3, 6, 7, 8, 9, 12]\nassert counting_sort([4, 1, 9, 5, 5, 1]) == [1, 1, 4, 5, 5, 9]\nassert counting_sort([9, 5, 18, 1, 4, 2]) == [1, 2, 4, 5, 9, 18]\nassert counting_sort([5, 7, 10, 3, 7, 3]) == [3, 3, 5, 7, 7, 10]\nassert counting_sort([9, 5, 18, 5, 6, 2]) == [2, 5, 5, 6, 9, 18]\nassert counting_sort([13, 3, 12, 4, 2, 5]) == [2, 3, 4, 5, 12, 13]\nassert counting_sort([13, 3, 10, 1, 5, 3]) == [1, 3, 3, 5, 10, 13]\nassert counting_sort([6, 7, 12, 6, 7, 1]) == [1, 6, 6, 7, 7, 12]\nassert counting_sort([5, 8, 18, 7, 6, 5]) == [5, 5, 6, 7, 8, 18]\nassert counting_sort([8, 3, 14, 4, 1, 3]) == [1, 3, 3, 4, 8, 14]\nassert counting_sort([11, 7, 15, 4, 6, 3]) == [3, 4, 6, 7, 11, 15]\nassert counting_sort([3, 5, 10, 2, 6, 2]) == [2, 2, 3, 5, 6, 10]\nassert counting_sort([5, 5, 10, 7, 3, 5]) == [3, 5, 5, 5, 7, 10]\nassert counting_sort([4, 5, 18, 6, 2, 6]) == [2, 4, 5, 6, 6, 18]\nassert counting_sort([3, 8, 9, 2, 2, 1]) == [1, 2, 2, 3, 8, 9]\nassert counting_sort([6, 2, 10, 5, 4, 3]) == [2, 3, 4, 5, 6, 10]\nassert counting_sort([3, 7, 14, 2, 5, 4]) == [2, 3, 4, 5, 7, 14]", "solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"}
{"task_id": "290", "split": "train", "entry_point": "max_length", "prompt": "def max_length(list1):\nWrite a function to find the list of lists with maximum length.", "prompt_cot": "def max_length(list1):\nWrite a function to find the list of lists with maximum length.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `max_length` — no comments, no prints, no tests.", "prompt_self_planning": "def max_length(list1):\nWrite a function to find the list of lists with maximum length.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `max_length` — no comments, no prints, no tests.", "tests": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])\nassert max_length([[3], [1, 6], [3, 8], [10, 7], [14, 14, 19]]) == (3, [14, 14, 19])\nassert max_length([[1], [2, 8], [2, 9], [8, 12], [12, 19, 13]]) == (3, [12, 19, 13])\nassert max_length([[3], [5, 6], [9, 4], [10, 11], [10, 17, 18]]) == (3, [10, 17, 18])\nassert max_length([[1], [2, 5], [10, 4], [13, 6], [10, 10, 21]]) == (3, [13, 6])\nassert max_length([[2], [4, 3], [6, 4], [11, 11], [9, 20, 18]]) == (3, [11, 11])\nassert max_length([[4], [1, 5], [4, 9], [4, 10], [14, 20, 13]]) == (3, [14, 20, 13])\nassert max_length([[5], [4, 5], [1, 10], [10, 11], [10, 15, 13]]) == (3, [10, 15, 13])\nassert max_length([[4], [4, 6], [9, 9], [5, 8], [9, 18, 19]]) == (3, [9, 18, 19])\nassert max_length([[4], [5, 3], [8, 8], [4, 16], [18, 14, 17]]) == (3, [18, 14, 17])\nassert max_length([[5], [1, 4], [7, 6], [9, 12], [17, 17, 17]]) == (3, [17, 17, 17])\nassert max_length([[1], [4, 2], [3, 3], [11, 12], [14, 11, 14]]) == (3, [14, 11, 14])\nassert max_length([[4], [5, 6], [7, 8], [8, 10], [16, 13, 20]]) == (3, [16, 13, 20])\nassert max_length([[3], [2, 7], [9, 7], [13, 16], [12, 17, 19]]) == (3, [13, 16])\nassert max_length([[3], [4, 3], [4, 5], [4, 12], [15, 18, 12]]) == (3, [15, 18, 12])\nassert max_length([[1], [4, 7], [1, 5], [9, 6], [14, 17, 22]]) == (3, [14, 17, 22])\nassert max_length([[4], [2, 1], [8, 12], [11, 8], [16, 20, 13]]) == (3, [16, 20, 13])\nassert max_length([[4], [4, 5], [6, 8], [14, 13], [9, 10, 18]]) == (3, [14, 13])\nassert max_length([[1], [5, 7], [4, 11], [9, 14], [13, 14, 21]]) == (3, [13, 14, 21])\nassert max_length([[2], [2, 8], [1, 9], [9, 8], [13, 10, 18]]) == (3, [13, 10, 18])\nassert max_length([[1], [1, 3], [9, 10], [14, 12], [15, 18, 12]]) == (3, [15, 18, 12])\nassert max_length([[5], [2, 4], [2, 4], [9, 8], [18, 16, 14]]) == (3, [18, 16, 14])\nassert max_length([[3], [3, 4], [5, 8], [4, 14], [18, 10, 14]]) == (3, [18, 10, 14])\nassert max_length([[4], [2, 8], [4, 12], [8, 13], [10, 18, 15]]) == (3, [10, 18, 15])\nassert max_length([[4], [1, 7], [6, 10], [13, 14], [15, 12, 17]]) == (3, [15, 12, 17])\nassert max_length([[1], [5, 4], [3, 12], [11, 13], [16, 14, 14]]) == (3, [16, 14, 14])\nassert max_length([[3], [4, 8], [7, 12], [8, 8], [16, 12, 17]]) == (3, [16, 12, 17])\nassert max_length([[3], [2, 2], [1, 9], [6, 15], [16, 10, 16]]) == (3, [16, 10, 16])\nassert max_length([[3], [4, 7], [9, 5], [6, 16], [18, 15, 15]]) == (3, [18, 15, 15])\nassert max_length([[4], [6, 2], [3, 5], [13, 10], [18, 12, 14]]) == (3, [18, 12, 14])\nassert max_length([[2], [2, 4], [5, 11], [9, 16], [13, 19, 15]]) == (3, [13, 19, 15])\nassert max_length([[5], [3, 2], [6, 9], [12, 14], [15, 12, 12]]) == (3, [15, 12, 12])\nassert max_length([[3], [5, 2], [2, 10], [13, 6], [12, 14, 15]]) == (3, [13, 6])\nassert max_length([[4], [6, 6], [3, 8], [13, 9], [8, 20, 15]]) == (3, [13, 9])\nassert max_length([[6], [1, 7], [15, 9, 17, 19]]) == (4, [15, 9, 17, 19])\nassert max_length([[6], [10, 9], [12, 13, 16, 17]]) == (4, [12, 13, 16, 17])\nassert max_length([[5], [6, 4], [7, 13, 14, 19]]) == (4, [7, 13, 14, 19])\nassert max_length([[6], [1, 11], [6, 17, 11, 20]]) == (4, [6, 17, 11, 20])\nassert max_length([[3], [10, 4], [10, 13, 15, 19]]) == (4, [10, 13, 15, 19])\nassert max_length([[6], [6, 11], [7, 17, 14, 14]]) == (4, [7, 17, 14, 14])\nassert max_length([[4], [6, 11], [9, 15, 17, 13]]) == (4, [9, 15, 17, 13])\nassert max_length([[6], [6, 10], [14, 14, 16, 13]]) == (4, [14, 14, 16, 13])\nassert max_length([[5], [1, 9], [11, 11, 10, 16]]) == (4, [11, 11, 10, 16])\nassert max_length([[2], [10, 11], [9, 8, 17, 10]]) == (4, [10, 11])\nassert max_length([[2], [1, 6], [7, 17, 9, 16]]) == (4, [7, 17, 9, 16])\nassert max_length([[5], [3, 4], [7, 14, 13, 11]]) == (4, [7, 14, 13, 11])\nassert max_length([[3], [7, 9], [15, 15, 16, 20]]) == (4, [15, 15, 16, 20])\nassert max_length([[3], [2, 6], [9, 14, 11, 15]]) == (4, [9, 14, 11, 15])\nassert max_length([[3], [10, 9], [8, 8, 17, 18]]) == (4, [10, 9])\nassert max_length([[6], [1, 7], [10, 16, 10, 15]]) == (4, [10, 16, 10, 15])\nassert max_length([[3], [7, 7], [12, 14, 9, 17]]) == (4, [12, 14, 9, 17])\nassert max_length([[1], [3, 12], [5, 13, 17, 16]]) == (4, [5, 13, 17, 16])\nassert max_length([[4], [7, 3], [9, 15, 9, 18]]) == (4, [9, 15, 9, 18])\nassert max_length([[4], [7, 3], [12, 16, 10, 10]]) == (4, [12, 16, 10, 10])\nassert max_length([[5], [1, 8], [9, 7, 9, 20]]) == (4, [9, 7, 9, 20])\nassert max_length([[2], [8, 6], [7, 12, 10, 16]]) == (4, [8, 6])\nassert max_length([[2], [4, 8], [10, 14, 10, 19]]) == (4, [10, 14, 10, 19])\nassert max_length([[6], [4, 3], [6, 11, 15, 12]]) == (4, [6, 11, 15, 12])\nassert max_length([[1], [1, 12], [12, 16, 9, 16]]) == (4, [12, 16, 9, 16])\nassert max_length([[3], [8, 4], [10, 14, 18, 15]]) == (4, [10, 14, 18, 15])\nassert max_length([[1], [10, 3], [6, 9, 12, 10]]) == (4, [10, 3])\nassert max_length([[1], [1, 10], [14, 12, 13, 14]]) == (4, [14, 12, 13, 14])\nassert max_length([[3], [2, 8], [14, 16, 12, 10]]) == (4, [14, 16, 12, 10])\nassert max_length([[2], [4, 5], [8, 11, 10, 19]]) == (4, [8, 11, 10, 19])\nassert max_length([[4], [10, 12], [13, 10, 18, 12]]) == (4, [13, 10, 18, 12])\nassert max_length([[4], [3, 6], [10, 11, 9, 13]]) == (4, [10, 11, 9, 13])\nassert max_length([[4], [3, 2], [8, 11, 10, 18]]) == (4, [8, 11, 10, 18])\nassert max_length([[3], [16, 21, 21]]) == (3, [16, 21, 21])\nassert max_length([[5], [17, 20, 30]]) == (3, [17, 20, 30])\nassert max_length([[2], [17, 21, 23]]) == (3, [17, 21, 23])\nassert max_length([[9], [14, 15, 22]]) == (3, [14, 15, 22])\nassert max_length([[10], [15, 25, 30]]) == (3, [15, 25, 30])\nassert max_length([[8], [19, 15, 27]]) == (3, [19, 15, 27])\nassert max_length([[4], [15, 21, 20]]) == (3, [15, 21, 20])\nassert max_length([[1], [16, 16, 30]]) == (3, [16, 16, 30])\nassert max_length([[7], [15, 23, 22]]) == (3, [15, 23, 22])\nassert max_length([[8], [17, 20, 28]]) == (3, [17, 20, 28])\nassert max_length([[7], [10, 23, 30]]) == (3, [10, 23, 30])\nassert max_length([[6], [10, 21, 28]]) == (3, [10, 21, 28])\nassert max_length([[2], [12, 21, 26]]) == (3, [12, 21, 26])\nassert max_length([[3], [17, 25, 26]]) == (3, [17, 25, 26])\nassert max_length([[4], [12, 19, 29]]) == (3, [12, 19, 29])\nassert max_length([[3], [15, 23, 26]]) == (3, [15, 23, 26])\nassert max_length([[6], [14, 15, 26]]) == (3, [14, 15, 26])\nassert max_length([[6], [17, 18, 27]]) == (3, [17, 18, 27])\nassert max_length([[4], [16, 18, 20]]) == (3, [16, 18, 20])\nassert max_length([[1], [13, 17, 20]]) == (3, [13, 17, 20])\nassert max_length([[5], [18, 24, 21]]) == (3, [18, 24, 21])\nassert max_length([[2], [18, 24, 24]]) == (3, [18, 24, 24])\nassert max_length([[8], [10, 22, 24]]) == (3, [10, 22, 24])\nassert max_length([[9], [12, 22, 26]]) == (3, [12, 22, 26])\nassert max_length([[10], [10, 23, 20]]) == (3, [10, 23, 20])\nassert max_length([[6], [20, 17, 25]]) == (3, [20, 17, 25])\nassert max_length([[2], [16, 22, 30]]) == (3, [16, 22, 30])\nassert max_length([[4], [10, 24, 23]]) == (3, [10, 24, 23])\nassert max_length([[6], [14, 25, 20]]) == (3, [14, 25, 20])\nassert max_length([[7], [11, 20, 25]]) == (3, [11, 20, 25])\nassert max_length([[4], [20, 16, 30]]) == (3, [20, 16, 30])\nassert max_length([[7], [19, 20, 20]]) == (3, [19, 20, 20])\nassert max_length([[5], [13, 18, 29]]) == (3, [13, 18, 29])", "solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"}
{"task_id": "944", "split": "train", "entry_point": "num_position", "prompt": "def num_position(text):\nWrite a function to separate and print the numbers and their position of a given string.", "prompt_cot": "def num_position(text):\nWrite a function to separate and print the numbers and their position of a given string.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `num_position` — no comments, no prints, no tests.", "prompt_self_planning": "def num_position(text):\nWrite a function to separate and print the numbers and their position of a given string.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `num_position` — no comments, no prints, no tests.", "tests": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9\nassert num_position(\"i463kar0q9w3rtkk7r5im0slj736p7edphcda\") == 1\nassert num_position(\"y 1lmacgqjxf9qlbfnghs9uz21jbq9354fa3\") == 2\nassert num_position(\"1a7kmayi570gnw90o9 f0ndpv7s8a57040rf0\") == 0\nassert num_position(\"4ypd5yf88vmyp9t2jrx3t0x1okczanodkm\") == 0\nassert num_position(\"6y2o8984m 5p200o4f1tlf6v7ghk8ty3onkjna\") == 0\nassert num_position(\"sf0w0qlfjcmuxcdir r062hvshxk ind0qixeg vv0\") == 2\nassert num_position(\"arsducimygtb59j2vx980 1lbiuu4fxp7yk\") == 12\nassert num_position(\"79tsaam4zduame8aditvcppwa6wdgw9bnw86\") == 0\nassert num_position(\"sw2dga4whwso4ue43kt81hn7bjym93q97a3l5ol2o\") == 2\nassert num_position(\"qh82iv4rlutax86t m2mcebw2mngiwtfkh\") == 2\nassert num_position(\"7tmz gu1ci26rwmtw8waji713so5w81vz3nlb\") == 0\nassert num_position(\"xc0oisb12qzqgbqmv3ly 4sh4y9wdp73835hm3yu2\") == 2\nassert num_position(\"328q m7dwfh p421fnkg4hzzbp39h09jv3 xmy9\") == 0\nassert num_position(\"8v0 uar55xuatn6glrohfz6bhxawwmc57f\") == 0\nassert num_position(\"00hj6ewzygh8rlx8e8uelbyswdppvi3v ask2n7v\") == 0\nassert num_position(\"swxrhxrrjumdtivev62oosqx0n9lqmw41wq7w4dr\") == 17\nassert num_position(\"vjp7iw1eadygzueb1o0in541ebq8nkj65\") == 3\nassert num_position(\"f7af6r4f2k3v8zld61u zuuzvqwbpn45aj1\") == 1\nassert num_position(\"q3q3km6w1hiixq74auv5uoudo2tij8ve83ifc5olpa\") == 1\nassert num_position(\"nl789fb u6cnqnbripjleny9e 9z0hv7re\") == 2\nassert num_position(\"ukomw4vlhzo8v7ofntn8 7vfmy8slymkbrkc6 2\") == 5\nassert num_position(\"stx1ko04h78ttjx9xdvnhqbpg7hagxtwyxkz \") == 3\nassert num_position(\"ha4tvdn8q2axxgdqmp8d ekm w0qspegt\") == 2\nassert num_position(\"3jzqfj hrgzpe1g3kuxhp1 gxh7gpaqx837d1fe6u\") == 0\nassert num_position(\"auclhxat 6wr6w8qh0 b1c5wl2to4nnbsqzihvo\") == 9\nassert num_position(\"9rvbuorh52s 1p74843p24c378 a6yeccz\") == 0\nassert num_position(\"kz028ewsv0 95tz puylifv9isvs23v8vm\") == 2\nassert num_position(\"25xuxsk 8jttqddjdbq7v5 115pr 1zw w\") == 0\nassert num_position(\"01ow8lrgovjumr60w7djm zpp 5jzy4m94\") == 0\nassert num_position(\"tokukrqc19plec97cjx7ij2l1v7lwz8f5m240\") == 8\nassert num_position(\"ced2kr5hgg3ei96pi5yb0 1lovex9o 1joa0n9pkvt\") == 3\nassert num_position(\"ym4mxqugv zxwrz9 8sshwk236foyq9im3z\") == 2\nassert num_position(\"9p ye31v4spujkwcsw2wvhx7r8fajl6tf2rju3qv4\") == 0\nassert num_position(\"j4ahgaabvl72ekwx43j2rumrkx b\") == 1\nassert num_position(\"3j14ns9g164wu7fhmiqzpk6e7t\") == 0\nassert num_position(\"tm9jsv0l359xyz8qe008zxtbtpw0n7\") == 2\nassert num_position(\"bdmhx3odmsw9r1 5pcqn4k9ki\") == 5\nassert num_position(\"jr7qyvw11i4yk1dszy72t6\") == 2\nassert num_position(\"wcti53w5mewjj416q3t3wn7cn\") == 4\nassert num_position(\"uwijsbxks3lf9bkmxky70j0dndem\") == 9\nassert num_position(\"trpphqzdfrilcvywhijwk1w \") == 21\nassert num_position(\"xst5k90y11dspblzbfvqkweg9o7c\") == 3\nassert num_position(\"t1gmkcasa1wtu2 foo0bj\") == 1\nassert num_position(\"7z73i0wenu5suelu51fbi\") == 0\nassert num_position(\"k7f8ipejcexdr20if thn4brv\") == 1\nassert num_position(\"8xs0hjf4tm4pmmcyy4zd5sgij5h78\") == 0\nassert num_position(\"jmzbw7ym1ei89 m11xlfx3qo1bde\") == 5\nassert num_position(\"ezl6isa528v2gr1uw0xf8 3cmv e\") == 3\nassert num_position(\"3ebjny0x1cnbo7ghmi211zz9c 7\") == 0\nassert num_position(\"69n46pti7ny0al0wgvvwd\") == 0\nassert num_position(\"o xlaidu22k10mgtzxpw26gel\") == 8\nassert num_position(\"9c8nqhsod ggc03u7bu20e1\") == 0\nassert num_position(\"asf7dsn17pvfotsbqwyahstllqpp2\") == 3\nassert num_position(\"f7evdwvt8bj45dxwxc7cr8z374\") == 1\nassert num_position(\"cffbeemi6alfxb8oztc67sp4tf\") == 8\nassert num_position(\"e039y1wl9ccb5bwcinnoo726lm98c\") == 1\nassert num_position(\"wsdsf 6yvxe71rcohnyt3 \") == 6\nassert num_position(\"i5b7nqu rc7trqx7txgqvftpr\") == 1\nassert num_position(\"h08mbglfjhu2zi8039tzu\") == 1\nassert num_position(\"hf wk5x5a7cuaztaw1zl44y82low9w\") == 5\nassert num_position(\"vn5mec63kc1jw364ak0n4prxxx \") == 2\nassert num_position(\"fh3rqqv1lpl2u5uyw2oox090x\") == 2\nassert num_position(\"5yd4amb9dqryy4l0mh84k\") == 0\nassert num_position(\"wdj70wxx0y2rr4buscjxtvlr01x\") == 3\nassert num_position(\"lry414pq 6987ebm7h7l fqngt \") == 3\nassert num_position(\"b40i8virc8ny2qm v le27 2\") == 1\nassert num_position(\"ws9bhg0v1hzs611nw0gspgge8rnl76ga5\") == 2\nassert num_position(\"5lu  ujzwti6hgxzvtxqgjkz9gdgumdv 0a\") == 0\nassert num_position(\"ttqywwfnm3p6hlbq4k5o8m20asoe94jf\") == 9\nassert num_position(\"84flkq2x5nv4uyswy1sngkp4z1xfqnsowsoogyy\") == 0\nassert num_position(\"tqwf6wjchq1h0zgc64ltycaj5dlqhrfsvrgf0\") == 4\nassert num_position(\"y jzkzp5 6d1mj7h49uq9h4kgtt7ni0a99moc\") == 7\nassert num_position(\"u5o nzigve83cl8e3axis0vmu 95d7r3l2nt7\") == 1\nassert num_position(\"dr1 cuj5t2b2iytsy6 mz30hqgecqu 9\") == 2\nassert num_position(\"0jfgdvqe1ntsk8lfg83srn57vmim7m21vak5\") == 0\nassert num_position(\"64obbvk5njaf33artntvfrxyn 2uek4phzbv\") == 0\nassert num_position(\"wn84 y1imw vdwtxx2cd8gk8e1yb0n7ejqx\") == 2\nassert num_position(\"ha8ityjgkaw jyocvv56qe15yjdc9av6fot9db8\") == 2\nassert num_position(\"wmvdw5v7h8ns fzcl1umy7yhplu7y3gaj09e\") == 5\nassert num_position(\"833621sfvb7 o672z2qzatnaeknwbyl1yy44 k\") == 0\nassert num_position(\"5wvmzd togk y24saio0ddwa edfyqyillx\") == 0\nassert num_position(\"4hf1oly40nkkac ce3q 8tmlokkvwa\") == 0\nassert num_position(\"z27t5tgzyn6ar7oytrvmtf655o98tqr02i4\") == 1\nassert num_position(\"h1 cmcfbc2k80upvbvmoi81qap ulauah6fpy2 \") == 1\nassert num_position(\"9u dm7ffnnpvdapc8nqphofim0ivrjxk\") == 0\nassert num_position(\"3wbdppff1brvgrmievk2takm6 zf m\") == 0\nassert num_position(\"7pjib1dqhhqrqzob6rwnkr1gust3bezat\") == 0\nassert num_position(\"bjwem1j08 v7gbc aotvcruzsvejx99vpjkx2l\") == 5\nassert num_position(\"jz9fsp0yluv2p1mmylwbuincnlfqhjrqc7\") == 2\nassert num_position(\"3gyr4yaq6uolklsc93d6js58cjaa8f\") == 0\nassert num_position(\"0w8i0dkblx9g03p123awj0mqb39a5efe1p\") == 0\nassert num_position(\"weylzblvcyi5vjeia316r0v922z6ic\") == 11\nassert num_position(\"3gtmcaygyb2ncfxytiaysjv72jx27u0rl\") == 0\nassert num_position(\"pn efsxk39dzer6nj92oafv3iju3ue\") == 8\nassert num_position(\"mafy7992f 3hkxbg6i3q904eowft2ow \") == 4\nassert num_position(\"9o5ucvqjvs2qu8404yqrgzcreqhkxvop\") == 0\nassert num_position(\"qwd8delx8hfbaechjszoio7ndbkgyhddfdu9dw5\") == 3\nassert num_position(\"w3m58kdjiv7sce2vrh76 5hm42husf7x17j30rl\") == 1\nassert num_position(\" jjnbz cu feimytxhmt0syab0rye5m\") == 20", "solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"}
{"task_id": "596", "split": "train", "entry_point": "tuple_size", "prompt": "def tuple_size(tuple_list):\nWrite a function to find the size of the given tuple.", "prompt_cot": "def tuple_size(tuple_list):\nWrite a function to find the size of the given tuple.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `tuple_size` — no comments, no prints, no tests.", "prompt_self_planning": "def tuple_size(tuple_list):\nWrite a function to find the size of the given tuple.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `tuple_size` — no comments, no prints, no tests.", "tests": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\nassert tuple_size(('F', 1, 'X', 3, 'J', 2)) == 88\nassert tuple_size(('K', 4, 'J', 2, 'D', 3)) == 88\nassert tuple_size(('I', 1, 'U', 3, 'S', 7)) == 88\nassert tuple_size(('M', 4, 'D', 2, 'P', 8)) == 88\nassert tuple_size(('N', 6, 'F', 2, 'W', 1)) == 88\nassert tuple_size(('E', 3, 'S', 3, 'M', 3)) == 88\nassert tuple_size(('F', 5, 'I', 6, 'O', 3)) == 88\nassert tuple_size(('E', 4, 'F', 3, 'R', 3)) == 88\nassert tuple_size(('S', 4, 'M', 1, 'D', 7)) == 88\nassert tuple_size(('H', 2, 'O', 3, 'G', 4)) == 88\nassert tuple_size(('N', 2, 'V', 3, 'L', 1)) == 88\nassert tuple_size(('A', 4, 'Y', 5, 'K', 1)) == 88\nassert tuple_size(('H', 5, 'M', 4, 'B', 3)) == 88\nassert tuple_size(('L', 4, 'K', 7, 'W', 5)) == 88\nassert tuple_size(('U', 4, 'O', 1, 'Y', 3)) == 88\nassert tuple_size(('L', 3, 'A', 2, 'B', 5)) == 88\nassert tuple_size(('F', 4, 'H', 4, 'R', 2)) == 88\nassert tuple_size(('X', 6, 'S', 1, 'Q', 3)) == 88\nassert tuple_size(('M', 4, 'W', 2, 'U', 7)) == 88\nassert tuple_size(('D', 6, 'A', 5, 'J', 3)) == 88\nassert tuple_size(('Y', 4, 'M', 5, 'T', 8)) == 88\nassert tuple_size(('L', 1, 'J', 1, 'Z', 5)) == 88\nassert tuple_size(('A', 5, 'H', 2, 'D', 3)) == 88\nassert tuple_size(('U', 1, 'V', 6, 'U', 5)) == 88\nassert tuple_size(('I', 4, 'Z', 2, 'L', 4)) == 88\nassert tuple_size(('C', 3, 'M', 4, 'K', 8)) == 88\nassert tuple_size(('I', 2, 'U', 4, 'M', 2)) == 88\nassert tuple_size(('F', 2, 'L', 4, 'N', 4)) == 88\nassert tuple_size(('G', 1, 'U', 6, 'P', 2)) == 88\nassert tuple_size(('Y', 6, 'P', 6, 'A', 8)) == 88\nassert tuple_size(('K', 3, 'N', 7, 'X', 6)) == 88\nassert tuple_size(('U', 2, 'S', 7, 'U', 7)) == 88\nassert tuple_size(('X', 6, 'W', 7, 'J', 6)) == 88\nassert tuple_size((1, 'VfvTtfeBr', 1, 'GFOmhdZEawD', 4, 'gFGYZR')) == 88\nassert tuple_size((2, 'eaxzWi', 5, 'BBhdWSmcPKWW', 5, 'icvdRkGQuDFo')) == 88\nassert tuple_size((2, 'EfGbQXkRq', 1, 'fyh', 2, 'gJlAJe')) == 88\nassert tuple_size((3, 'kfOA', 1, 'dpPpDYDBnP', 1, 'NuwkmxilqF')) == 88\nassert tuple_size((6, 'dUEYlju', 5, 'lLmetbfHzULs', 4, 'CwcYCKj')) == 88\nassert tuple_size((2, 'ATbiT', 5, 'vEKNzRGMYYy', 4, 'SmlvExBO')) == 88\nassert tuple_size((1, 'IYMu', 4, 'JpNtU', 7, 'iCrJpSka')) == 88\nassert tuple_size((4, 'YDvdiKQ', 5, 'foMie', 4, 'okNgkniSnfOHTmd')) == 88\nassert tuple_size((3, 'fey', 4, 'eLJap', 6, 'EpglLbuMMWDZ')) == 88\nassert tuple_size((4, 'nNaSKEAv', 2, 'bSEJ', 8, 'PhoWmYms')) == 88\nassert tuple_size((2, 'YIFGFcA', 7, 'dTK', 2, 'QSqSCZeeIVWD')) == 88\nassert tuple_size((1, 'KEd', 4, 'oDiNrsqAnLYO', 4, 'qATLmuo')) == 88\nassert tuple_size((5, 'CEYddSo', 3, 'AzoPcVpCo', 1, 'repSUMMV')) == 88\nassert tuple_size((5, 'MVRnMMi', 3, 'Aqvawda', 1, 'djYTVWrIvymOzMs')) == 88\nassert tuple_size((4, 'wPlZ', 1, 'aQDLkj', 1, 'VaAiqxDIOwjLy')) == 88\nassert tuple_size((6, 'TsmLf', 4, 'fGU', 5, 'xMwkxVtltXpAfZ')) == 88\nassert tuple_size((5, 'kOa', 4, 'qEDklItxsQbJ', 3, 'xqspTtnL')) == 88\nassert tuple_size((1, 'etwbdAi', 1, 'iGdKXaHByH', 3, 'mgFbfXcms')) == 88\nassert tuple_size((4, 'jDjfGG', 7, 'bNqgIHLY', 6, 'BUBcMWVNlaKs')) == 88\nassert tuple_size((5, 'DrnETjIE', 5, 'XYGtydtl', 4, 'fuFTmzHoeR')) == 88\nassert tuple_size((4, 'PIjsxd', 2, 'SDxFkGluM', 4, 'XfubjxI')) == 88\nassert tuple_size((4, 'CVZcfJGbe', 2, 'wOwnGZQFNKl', 6, 'SqSqNtKzrafa')) == 88\nassert tuple_size((1, 'DenxP', 4, 'dBviqU', 5, 'JLJbBGNOfuAJu')) == 88\nassert tuple_size((3, 'tcpYVAxQ', 3, 'wrHOTmKNd', 4, 'WKcCmBVk')) == 88\nassert tuple_size((5, 'pKIvQ', 7, 'MBvRHJK', 7, 'ithZUtr')) == 88\nassert tuple_size((2, 'VEttMU', 1, 'YJAdZhPD', 6, 'JqDgEqZdsTJO')) == 88\nassert tuple_size((2, 'avAKG', 3, 'tSidpJb', 2, 'xdHfefJRMdHT')) == 88\nassert tuple_size((6, 'fGhO', 4, 'TaNtOxFMsc', 6, 'BDGjbixXJNICux')) == 88\nassert tuple_size((3, 'AphfwyzD', 4, 'hRsDPvKjyR', 4, 'QUWhyiihirXI')) == 88\nassert tuple_size((5, 'JHozm', 2, 'kaQtHhevVtGz', 8, 'HLaWBfFTxM')) == 88\nassert tuple_size((2, 'guPst', 7, 'EcBGO', 5, 'jYoaGsvG')) == 88\nassert tuple_size((5, 'vbgL', 2, 'igPzyFfdN', 5, 'LSmONfS')) == 88\nassert tuple_size((2, 'XAPuQ', 2, 'QFsc', 4, 'OuYEQIMkiDB')) == 88\nassert tuple_size(((4, 'ewaZSjVtH'), (5, 'DUMQwyY'), (5, 'PsExP'), (2, 'JJEOKbCB'))) == 72\nassert tuple_size(((4, 'YRFCH'), (5, 'MzTb'), (2, 'DGZEA'), (5, 'AutwFltD'))) == 72\nassert tuple_size(((6, 'AFD'), (4, 'dMei'), (3, 'LlFgTfRnM'), (6, 'aLibgHkr'))) == 72\nassert tuple_size(((5, 'ElUVSKv'), (4, 'cyr'), (2, 'UDgkGJFP'), (7, 'conYhLVT'))) == 72\nassert tuple_size(((2, 'akfVlBi'), (5, 'plI'), (8, 'wwlJcTh'), (6, 'LgpiXnUD'))) == 72\nassert tuple_size(((6, 'dKsoS'), (5, 'vLG'), (2, 'FqGAVA'), (6, 'JRWwNL'))) == 72\nassert tuple_size(((1, 'MxMflsE'), (5, 'OOPDuXQG'), (7, 'QDr'), (2, 'OxMgEc'))) == 72\nassert tuple_size(((6, 'AAMe'), (5, 'azto'), (7, 'uLGSEWYLz'), (4, 'eeBc'))) == 72\nassert tuple_size(((3, 'FRjUG'), (1, 'WUtA'), (4, 'PDhnTGpa'), (1, 'KfPNoaQs'))) == 72\nassert tuple_size(((1, 'ugxHB'), (2, 'VJUnKIn'), (6, 'kopaANJCh'), (6, 'vFfTwtZr'))) == 72\nassert tuple_size(((5, 'hiMxCp'), (7, 'FjTFR'), (1, 'nTNEtVgn'), (7, 'tdECh'))) == 72\nassert tuple_size(((4, 'PDfhkTox'), (5, 'WwBvw'), (6, 'UaqVPzm'), (5, 'Cdr'))) == 72\nassert tuple_size(((4, 'DRBtNbap'), (5, 'tQJCxj'), (2, 'TCxtQ'), (7, 'TCLasImyq'))) == 72\nassert tuple_size(((1, 'otri'), (3, 'MYZWZ'), (8, 'SqQ'), (7, 'rTJJZNkjk'))) == 72\nassert tuple_size(((3, 'SSvmYcV'), (1, 'yGgkx'), (8, 'zSpWCn'), (5, 'GbKXiDYB'))) == 72\nassert tuple_size(((4, 'UIPzR'), (1, 'gaKQyGaA'), (4, 'PCpCkNGRJ'), (6, 'XjGeG'))) == 72\nassert tuple_size(((2, 'jJmEbiRq'), (2, 'DeYCYi'), (6, 'ZTkiXd'), (1, 'IxFon'))) == 72\nassert tuple_size(((2, 'mnZx'), (7, 'hnVjeXts'), (1, 'zRSSgG'), (3, 'XNzkYuQtZ'))) == 72\nassert tuple_size(((1, 'KkUoaNTR'), (4, 'YZqpRUk'), (5, 'hFSRbTJxX'), (4, 'rdZziC'))) == 72\nassert tuple_size(((2, 'GEh'), (4, 'MqKy'), (1, 'kRjtiy'), (2, 'MfEriv'))) == 72\nassert tuple_size(((1, 'vZb'), (6, 'IRExUOOcx'), (5, 'OmJUpbu'), (9, 'eTmbFlm'))) == 72\nassert tuple_size(((1, 'bWbeX'), (4, 'WaL'), (3, 'eef'), (2, 'ZkS'))) == 72\nassert tuple_size(((5, 'YrAdp'), (3, 'awZFTF'), (1, 'boeXmxrH'), (8, 'ZDCwgfy'))) == 72\nassert tuple_size(((5, 'fyFO'), (3, 'qNB'), (2, 'rczqsL'), (8, 'FkBh'))) == 72\nassert tuple_size(((6, 'YGaJ'), (1, 'tRp'), (3, 'QPf'), (6, 'LcgCb'))) == 72\nassert tuple_size(((3, 'PvGARhk'), (4, 'tBkyB'), (5, 'NxmGU'), (4, 'zWkvThl'))) == 72\nassert tuple_size(((2, 'ocGxd'), (7, 'KCNTdRA'), (7, 'nxxeTcfA'), (4, 'pcZnfNa'))) == 72\nassert tuple_size(((4, 'daCudS'), (3, 'gRf'), (5, 'yFTJb'), (3, 'UGSFpYXv'))) == 72\nassert tuple_size(((3, 'itMXtUw'), (4, 'WnqhU'), (4, 'yqIr'), (4, 'uofMtM'))) == 72\nassert tuple_size(((1, 'tgVm'), (5, 'DlcdNYIgu'), (6, 'Nwat'), (1, 'RzNoSGM'))) == 72\nassert tuple_size(((3, 'BfQomrtY'), (7, 'dRB'), (3, 'eEeEHA'), (6, 'BOXNwNf'))) == 72\nassert tuple_size(((5, 'ZqWoc'), (7, 'WZeBze'), (6, 'HkowjYrKi'), (2, 'ovHD'))) == 72\nassert tuple_size(((3, 'AIrUzb'), (2, 'icXOhjbO'), (2, 'abe'), (1, 'WosMYDQ'))) == 72", "solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list))"}
{"task_id": "410", "split": "train", "entry_point": "min_val", "prompt": "def min_val(listval):\nWrite a function to find the minimum value in a given heterogeneous list.", "prompt_cot": "def min_val(listval):\nWrite a function to find the minimum value in a given heterogeneous list.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `min_val` — no comments, no prints, no tests.", "prompt_self_planning": "def min_val(listval):\nWrite a function to find the minimum value in a given heterogeneous list.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `min_val` — no comments, no prints, no tests.", "tests": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20\nassert min_val(['Hzgn', 8, 2, 6, 3, 'rnjxdg']) == 2\nassert min_val(['smGoJ', 3, 6, 6, 3, 'orvw']) == 3\nassert min_val(['hJXuNEvHE', 2, 5, 7, 9, 'hbn']) == 2\nassert min_val(['HstmSajZT', 2, 4, 4, 9, 'qsfmpgliekx']) == 2\nassert min_val(['LDsJJQbL', 3, 2, 6, 8, 'weptakuf']) == 2\nassert min_val(['QIrO', 2, 1, 7, 2, 'dictnghn']) == 1\nassert min_val(['wAUEw', 4, 6, 9, 8, 'ofeau']) == 4\nassert min_val(['XISeqgLUeu', 5, 1, 7, 2, 'bkyy']) == 1\nassert min_val(['OjJCC', 1, 6, 6, 1, 'xldewi']) == 1\nassert min_val(['LUeFL', 1, 5, 5, 7, 'uqxlqznrv']) == 1\nassert min_val(['syHRbRpq', 5, 5, 2, 8, 'siyxhciiskhc']) == 2\nassert min_val(['HeHgPo', 6, 3, 1, 8, 'fge']) == 1\nassert min_val(['Lno', 4, 1, 9, 6, 'gfz']) == 1\nassert min_val(['eUjaqNfdsfZV', 6, 7, 5, 7, 'aehukfbtua']) == 5\nassert min_val(['FlXZOMZQ', 3, 2, 9, 2, 'gkuvqyh']) == 2\nassert min_val(['ICNIULJ', 7, 2, 6, 5, 'hscazrhrlxqt']) == 2\nassert min_val(['KQYa', 1, 5, 5, 4, 'iesmreyufgf']) == 1\nassert min_val(['kSYdtspqDG', 4, 4, 4, 2, 'llofkv']) == 2\nassert min_val(['vYqB', 3, 4, 3, 2, 'otixcfybon']) == 2\nassert min_val(['LwDZ', 2, 1, 6, 1, 'bpddrpprasw']) == 1\nassert min_val(['KliVODcNIbJc', 3, 3, 9, 6, 'henrl']) == 3\nassert min_val(['OYPlumF', 3, 3, 8, 6, 'iliy']) == 3\nassert min_val(['sQu', 1, 4, 4, 9, 'vkgfidlmzy']) == 1\nassert min_val(['OmaC', 7, 6, 2, 5, 'zgxokgnuisi']) == 2\nassert min_val(['fCttsVY', 4, 6, 1, 8, 'xecsbkn']) == 1\nassert min_val(['XQjWs', 1, 1, 7, 10, 'heqam']) == 1\nassert min_val(['adRuGajh', 6, 1, 2, 2, 'tijocjzucq']) == 1\nassert min_val(['xbnshYBm', 1, 3, 3, 4, 'pbefhjlb']) == 1\nassert min_val(['ywS', 2, 2, 1, 2, 'tryknyj']) == 1\nassert min_val(['vKysfe', 1, 3, 8, 5, 'azng']) == 1\nassert min_val(['HgTnglhornr', 7, 3, 8, 10, 'wic']) == 3\nassert min_val(['NwqdqjBBPk', 5, 4, 3, 9, 'pgi']) == 3\nassert min_val(['Nln', 2, 6, 8, 1, 'hnf']) == 1\nassert min_val(['yzCjPw', 10, 19, 21]) == 10\nassert min_val(['ddckbcme', 18, 25, 30]) == 18\nassert min_val(['enHpxvrPUEN', 10, 21, 28]) == 10\nassert min_val(['xIdWszWpgsh', 12, 16, 21]) == 12\nassert min_val(['oDwGWudYKK', 13, 15, 26]) == 13\nassert min_val(['eYfVp', 12, 16, 22]) == 12\nassert min_val(['jhm', 12, 22, 24]) == 12\nassert min_val(['IeEkrONOEmC', 11, 21, 20]) == 11\nassert min_val(['ItK', 20, 23, 22]) == 20\nassert min_val(['NplgFGF', 19, 21, 25]) == 19\nassert min_val(['gRSQJYRQHkmC', 17, 15, 21]) == 15\nassert min_val(['hgVNQkpShHJ', 11, 21, 20]) == 11\nassert min_val(['RSCovmS', 20, 25, 28]) == 20\nassert min_val(['bjTZS', 11, 15, 22]) == 11\nassert min_val(['iieGpcJ', 18, 16, 29]) == 16\nassert min_val(['ZmyzUt', 19, 22, 26]) == 19\nassert min_val(['CMrKdMZ', 14, 15, 28]) == 14\nassert min_val(['HiArCxFqGQa', 20, 20, 24]) == 20\nassert min_val(['zzfTT', 19, 21, 20]) == 19\nassert min_val(['pifcDG', 18, 16, 28]) == 16\nassert min_val(['ObgMOaZ', 12, 21, 20]) == 12\nassert min_val(['waqsmrdE', 14, 15, 23]) == 14\nassert min_val(['MEvpcqBbU', 10, 16, 29]) == 10\nassert min_val(['tmcki', 10, 21, 24]) == 10\nassert min_val(['rIIL', 10, 24, 30]) == 10\nassert min_val(['swrqQjhFI', 19, 21, 26]) == 19\nassert min_val(['jOUPHMJF', 14, 20, 26]) == 14\nassert min_val(['pTmgisJ', 16, 16, 24]) == 16\nassert min_val(['LVFJrqSdssnW', 15, 18, 20]) == 15\nassert min_val(['JmDbU', 18, 18, 22]) == 18\nassert min_val(['qwAWZCugaJC', 13, 15, 22]) == 13\nassert min_val(['vbqAzmgz', 12, 23, 25]) == 12\nassert min_val(['CPqeBdZXAk', 14, 20, 21]) == 14\nassert min_val(['xEOyOomyj', 25, 17, 45, 46, 'kpdel']) == 17\nassert min_val(['PSyADv', 32, 17, 37, 51, 'nunr']) == 17\nassert min_val(['CVVVVsOQFC', 28, 21, 37, 54, 'mvyr']) == 21\nassert min_val(['pUBa', 33, 20, 42, 50, 'ydmbrvqjdx']) == 20\nassert min_val(['ybFzwIJmTWWu', 30, 19, 37, 54, 'mlbqatrlpqe']) == 19\nassert min_val(['tMRDsoemtNs', 26, 15, 45, 51, 'ltboc']) == 15\nassert min_val(['COKgtcbO', 25, 16, 45, 52, 'uvrjqagw']) == 16\nassert min_val(['fPqdiORl', 32, 19, 41, 50, 'ghyt']) == 19\nassert min_val(['SXfumPE', 34, 19, 35, 55, 'wkecied']) == 19\nassert min_val(['zTTb', 31, 15, 39, 52, 'pajlvyuro']) == 15\nassert min_val(['PRjVeWrL', 30, 23, 42, 51, 'rfwkocnozzje']) == 23\nassert min_val(['YJYmbl', 35, 15, 38, 46, 'qjfszjxzz']) == 15\nassert min_val(['HBXGT', 33, 19, 45, 46, 'quonxqs']) == 19\nassert min_val(['vDn', 31, 25, 45, 51, 'qzhlkv']) == 25\nassert min_val(['tJcROflN', 33, 15, 37, 47, 'dotfngwccik']) == 15\nassert min_val(['XmbWokQfuv', 28, 15, 44, 53, 'wqayvfvpri']) == 15\nassert min_val(['EEy', 35, 15, 41, 51, 'rckhsmmby']) == 15\nassert min_val(['lRCN', 25, 20, 40, 55, 'fauxpepj']) == 20\nassert min_val(['xiJOQSdiIqpg', 26, 15, 41, 47, 'dbdgiuiist']) == 15\nassert min_val(['VbLKXdli', 30, 20, 43, 54, 'urvg']) == 20\nassert min_val(['lSaabdATFKe', 35, 20, 40, 55, 'enhlv']) == 20\nassert min_val(['FZUMTCTX', 33, 19, 40, 52, 'wrao']) == 19\nassert min_val(['qizItX', 33, 21, 39, 50, 'jtjp']) == 21\nassert min_val(['DcNmOF', 28, 15, 35, 54, 'qvlbjqopzu']) == 15\nassert min_val(['MxccVMwPrLMz', 28, 15, 36, 55, 'uhduvjppqlh']) == 15\nassert min_val(['paamd', 34, 16, 42, 54, 'wfsaafyu']) == 16\nassert min_val(['dPZvtpI', 29, 16, 45, 47, 'iszqs']) == 16\nassert min_val(['Sua', 30, 24, 42, 48, 'qneek']) == 24\nassert min_val(['CcQeyPtva', 32, 24, 37, 50, 'fyzg']) == 24\nassert min_val(['nWZSJvIqyvQ', 35, 19, 37, 49, 'mhyvvdas']) == 19\nassert min_val(['NgjVlijoj', 26, 23, 40, 45, 'ivoqgxtmumcs']) == 23\nassert min_val(['TYNHbzm', 29, 16, 44, 46, 'nlaltmiw']) == 16\nassert min_val(['zGWj', 35, 21, 35, 46, 'cemxckmva']) == 21", "solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"}
{"task_id": "151", "split": "train", "entry_point": "is_coprime", "prompt": "def gcd(p,q):\nWrite a python function to check whether the given number is co-prime or not.", "prompt_cot": "def gcd(p,q):\nWrite a python function to check whether the given number is co-prime or not.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `is_coprime` — no comments, no prints, no tests.", "prompt_self_planning": "def gcd(p,q):\nWrite a python function to check whether the given number is co-prime or not.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `is_coprime` — no comments, no prints, no tests.", "tests": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False\nassert is_coprime(14, 12) == False\nassert is_coprime(18, 8) == False\nassert is_coprime(17, 14) == True\nassert is_coprime(17, 15) == True\nassert is_coprime(12, 17) == True\nassert is_coprime(17, 13) == True\nassert is_coprime(13, 18) == True\nassert is_coprime(12, 11) == True\nassert is_coprime(18, 10) == False\nassert is_coprime(16, 11) == True\nassert is_coprime(13, 12) == True\nassert is_coprime(15, 13) == True\nassert is_coprime(13, 17) == True\nassert is_coprime(19, 17) == True\nassert is_coprime(14, 9) == True\nassert is_coprime(15, 10) == False\nassert is_coprime(15, 9) == False\nassert is_coprime(15, 9) == False\nassert is_coprime(15, 13) == True\nassert is_coprime(13, 13) == False\nassert is_coprime(21, 12) == False\nassert is_coprime(16, 14) == False\nassert is_coprime(22, 14) == False\nassert is_coprime(14, 8) == False\nassert is_coprime(16, 17) == True\nassert is_coprime(13, 8) == True\nassert is_coprime(16, 11) == True\nassert is_coprime(16, 16) == False\nassert is_coprime(15, 15) == False\nassert is_coprime(20, 12) == False\nassert is_coprime(16, 14) == False\nassert is_coprime(12, 10) == False\nassert is_coprime(16, 17) == True\nassert is_coprime(16, 25) == True\nassert is_coprime(15, 21) == False\nassert is_coprime(17, 26) == True\nassert is_coprime(20, 16) == False\nassert is_coprime(18, 18) == False\nassert is_coprime(17, 23) == True\nassert is_coprime(18, 24) == False\nassert is_coprime(14, 16) == False\nassert is_coprime(10, 18) == False\nassert is_coprime(14, 26) == False\nassert is_coprime(12, 21) == False\nassert is_coprime(13, 20) == True\nassert is_coprime(18, 18) == False\nassert is_coprime(17, 16) == True\nassert is_coprime(11, 18) == True\nassert is_coprime(16, 24) == False\nassert is_coprime(16, 21) == True\nassert is_coprime(19, 21) == True\nassert is_coprime(16, 18) == False\nassert is_coprime(13, 19) == True\nassert is_coprime(11, 17) == True\nassert is_coprime(14, 23) == True\nassert is_coprime(10, 17) == True\nassert is_coprime(16, 21) == True\nassert is_coprime(18, 23) == True\nassert is_coprime(15, 16) == True\nassert is_coprime(14, 17) == True\nassert is_coprime(10, 18) == False\nassert is_coprime(12, 17) == True\nassert is_coprime(20, 21) == True\nassert is_coprime(17, 17) == False\nassert is_coprime(18, 24) == False\nassert is_coprime(15, 25) == False\nassert is_coprime(22, 40) == False\nassert is_coprime(24, 41) == True\nassert is_coprime(24, 44) == False\nassert is_coprime(21, 50) == True\nassert is_coprime(23, 47) == True\nassert is_coprime(21, 46) == True\nassert is_coprime(27, 48) == False\nassert is_coprime(27, 47) == True\nassert is_coprime(27, 46) == True\nassert is_coprime(22, 41) == True\nassert is_coprime(22, 45) == True\nassert is_coprime(25, 41) == True\nassert is_coprime(22, 40) == False\nassert is_coprime(23, 45) == True\nassert is_coprime(20, 41) == True\nassert is_coprime(20, 45) == False\nassert is_coprime(29, 47) == True\nassert is_coprime(27, 41) == True\nassert is_coprime(20, 49) == True\nassert is_coprime(24, 44) == False\nassert is_coprime(22, 48) == False\nassert is_coprime(28, 46) == False\nassert is_coprime(26, 44) == False\nassert is_coprime(24, 41) == True\nassert is_coprime(27, 41) == True\nassert is_coprime(23, 43) == True\nassert is_coprime(22, 50) == False\nassert is_coprime(28, 43) == True\nassert is_coprime(24, 44) == False\nassert is_coprime(25, 44) == True\nassert is_coprime(21, 40) == True\nassert is_coprime(21, 40) == True\nassert is_coprime(25, 42) == True", "solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"}
{"task_id": "222", "split": "train", "entry_point": "check_type", "prompt": "def check_type(test_tuple):\nWrite a function to check if all the elements in tuple have same data type or not.", "prompt_cot": "def check_type(test_tuple):\nWrite a function to check if all the elements in tuple have same data type or not.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `check_type` — no comments, no prints, no tests.", "prompt_self_planning": "def check_type(test_tuple):\nWrite a function to check if all the elements in tuple have same data type or not.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `check_type` — no comments, no prints, no tests.", "tests": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True\nassert check_type((2, 1, 6, 2, 2, 3)) == True\nassert check_type((1, 7, 9, 8, 8, 1)) == True\nassert check_type((10, 11, 9, 2, 4, 3)) == True\nassert check_type((9, 1, 6, 7, 4, 4)) == True\nassert check_type((9, 9, 7, 4, 6, 3)) == True\nassert check_type((2, 10, 9, 4, 1, 7)) == True\nassert check_type((8, 9, 8, 2, 5, 5)) == True\nassert check_type((5, 10, 6, 8, 7, 9)) == True\nassert check_type((5, 5, 4, 1, 3, 6)) == True\nassert check_type((5, 8, 10, 4, 7, 1)) == True\nassert check_type((8, 9, 3, 5, 4, 1)) == True\nassert check_type((9, 8, 5, 6, 10, 1)) == True\nassert check_type((8, 5, 9, 8, 1, 5)) == True\nassert check_type((1, 2, 3, 2, 3, 3)) == True\nassert check_type((1, 2, 12, 7, 1, 10)) == True\nassert check_type((8, 11, 12, 1, 5, 4)) == True\nassert check_type((6, 1, 3, 2, 7, 8)) == True\nassert check_type((7, 3, 11, 3, 2, 11)) == True\nassert check_type((2, 1, 5, 5, 7, 3)) == True\nassert check_type((8, 7, 8, 2, 2, 4)) == True\nassert check_type((1, 3, 12, 8, 2, 3)) == True\nassert check_type((3, 3, 4, 5, 6, 11)) == True\nassert check_type((4, 3, 5, 6, 5, 9)) == True\nassert check_type((3, 7, 3, 1, 4, 10)) == True\nassert check_type((8, 10, 4, 2, 10, 1)) == True\nassert check_type((4, 9, 8, 3, 7, 6)) == True\nassert check_type((5, 2, 8, 8, 8, 2)) == True\nassert check_type((10, 2, 6, 8, 10, 3)) == True\nassert check_type((5, 6, 12, 7, 9, 11)) == True\nassert check_type((2, 4, 8, 3, 1, 7)) == True\nassert check_type((7, 3, 12, 4, 10, 6)) == True\nassert check_type((5, 6, 4, 6, 3, 1)) == True\nassert check_type((8, 3, 4, 7, 9, 4)) == True\nassert check_type((6, 5, '3')) == False\nassert check_type((6, 2, '0')) == False\nassert check_type((5, 4, '3')) == False\nassert check_type((3, 7, '5')) == False\nassert check_type((2, 6, '6')) == False\nassert check_type((4, 6, '0')) == False\nassert check_type((5, 4, '3')) == False\nassert check_type((5, 4, '1')) == False\nassert check_type((1, 7, '0')) == False\nassert check_type((3, 1, '5')) == False\nassert check_type((4, 5, '7')) == False\nassert check_type((6, 2, '3')) == False\nassert check_type((6, 3, '4')) == False\nassert check_type((4, 7, '3')) == False\nassert check_type((5, 2, '4')) == False\nassert check_type((2, 6, '3')) == False\nassert check_type((2, 2, '8')) == False\nassert check_type((3, 3, '4')) == False\nassert check_type((1, 6, '4')) == False\nassert check_type((4, 7, '3')) == False\nassert check_type((2, 1, '6')) == False\nassert check_type((3, 7, '3')) == False\nassert check_type((3, 2, '6')) == False\nassert check_type((4, 7, '7')) == False\nassert check_type((2, 4, '9')) == False\nassert check_type((3, 7, '0')) == False\nassert check_type((6, 4, '6')) == False\nassert check_type((2, 6, '5')) == False\nassert check_type((2, 5, '0')) == False\nassert check_type((3, 6, '9')) == False\nassert check_type((6, 6, '3')) == False\nassert check_type((4, 3, '3')) == False\nassert check_type((6, 7, '5')) == False\nassert check_type((1, 1, 3, 5, 7)) == True\nassert check_type((4, 7, 2, 3, 7)) == True\nassert check_type((1, 4, 2, 4, 6)) == True\nassert check_type((5, 1, 2, 3, 10)) == True\nassert check_type((1, 3, 2, 2, 2)) == True\nassert check_type((8, 1, 2, 2, 6)) == True\nassert check_type((3, 7, 1, 6, 5)) == True\nassert check_type((5, 6, 1, 9, 10)) == True\nassert check_type((5, 2, 1, 3, 6)) == True\nassert check_type((5, 2, 4, 2, 3)) == True\nassert check_type((3, 6, 4, 1, 5)) == True\nassert check_type((8, 2, 3, 4, 1)) == True\nassert check_type((8, 2, 1, 1, 9)) == True\nassert check_type((8, 1, 4, 8, 1)) == True\nassert check_type((5, 3, 2, 5, 7)) == True\nassert check_type((4, 6, 6, 5, 9)) == True\nassert check_type((6, 7, 2, 3, 1)) == True\nassert check_type((6, 3, 2, 4, 5)) == True\nassert check_type((7, 3, 2, 2, 1)) == True\nassert check_type((3, 1, 4, 1, 3)) == True\nassert check_type((2, 5, 6, 6, 8)) == True\nassert check_type((3, 2, 3, 3, 7)) == True\nassert check_type((3, 3, 5, 3, 3)) == True\nassert check_type((7, 4, 5, 8, 3)) == True\nassert check_type((3, 1, 5, 6, 7)) == True\nassert check_type((8, 7, 5, 8, 6)) == True\nassert check_type((4, 6, 5, 1, 10)) == True\nassert check_type((1, 6, 2, 8, 8)) == True\nassert check_type((8, 7, 4, 8, 6)) == True\nassert check_type((5, 2, 4, 1, 2)) == True\nassert check_type((4, 5, 6, 9, 4)) == True\nassert check_type((1, 2, 5, 7, 1)) == True\nassert check_type((7, 1, 5, 4, 6)) == True", "solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res)"}
{"task_id": "491", "split": "train", "entry_point": "sum_gp", "prompt": "def sum_gp(a,n,r):\nWrite a function to find the sum of geometric progression series.", "prompt_cot": "def sum_gp(a,n,r):\nWrite a function to find the sum of geometric progression series.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `sum_gp` — no comments, no prints, no tests.", "prompt_self_planning": "def sum_gp(a,n,r):\nWrite a function to find the sum of geometric progression series.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `sum_gp` — no comments, no prints, no tests.", "tests": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728\nassert sum_gp(1, 4, 4) == 85.0\nassert sum_gp(6, 4, 7) == 2400.0\nassert sum_gp(3, 2, 6) == 21.0\nassert sum_gp(6, 2, 4) == 30.0\nassert sum_gp(5, 3, 2) == 35.0\nassert sum_gp(1, 4, 6) == 259.0\nassert sum_gp(6, 4, 2) == 90.0\nassert sum_gp(2, 2, 7) == 16.0\nassert sum_gp(1, 3, 4) == 21.0\nassert sum_gp(5, 3, 2) == 35.0\nassert sum_gp(4, 6, 3) == 1456.0\nassert sum_gp(6, 5, 6) == 9330.0\nassert sum_gp(4, 7, 2) == 508.0\nassert sum_gp(3, 10, 3) == 88572.0\nassert sum_gp(6, 3, 6) == 258.0\nassert sum_gp(1, 5, 2) == 31.0\nassert sum_gp(2, 2, 5) == 12.0\nassert sum_gp(4, 9, 6) == 8062156.0\nassert sum_gp(3, 10, 5) == 7324218.0\nassert sum_gp(4, 9, 7) == 26902404.0\nassert sum_gp(5, 10, 2) == 5115.0\nassert sum_gp(5, 9, 4) == 436905.0\nassert sum_gp(2, 3, 2) == 14.0\nassert sum_gp(4, 6, 3) == 1456.0\nassert sum_gp(2, 6, 7) == 39216.0\nassert sum_gp(4, 5, 7) == 11204.0\nassert sum_gp(2, 10, 4) == 699050.0\nassert sum_gp(3, 7, 6) == 167961.0\nassert sum_gp(1, 10, 2) == 1023.0\nassert sum_gp(1, 5, 5) == 781.0\nassert sum_gp(4, 2, 2) == 12.0\nassert sum_gp(6, 4, 6) == 1554.0\nassert sum_gp(4, 3, 6) == 172.0\nassert sum_gp(2, 10, 3) == 59048.0\nassert sum_gp(4, 4, 8) == 2340.0\nassert sum_gp(4, 5, 5) == 3124.0\nassert sum_gp(1, 6, 6) == 9331.0\nassert sum_gp(3, 5, 5) == 2343.0\nassert sum_gp(3, 5, 3) == 363.0\nassert sum_gp(4, 8, 6) == 1343692.0\nassert sum_gp(2, 6, 8) == 74898.0\nassert sum_gp(1, 10, 5) == 2441406.0\nassert sum_gp(3, 1, 5) == 3.0\nassert sum_gp(3, 7, 4) == 16383.0\nassert sum_gp(2, 9, 9) == 96855122.0\nassert sum_gp(5, 7, 8) == 1497965.0\nassert sum_gp(1, 9, 2) == 511.0\nassert sum_gp(4, 10, 7) == 188316832.0\nassert sum_gp(6, 8, 2) == 1530.0\nassert sum_gp(5, 6, 2) == 315.0\nassert sum_gp(4, 9, 5) == 1953124.0\nassert sum_gp(5, 1, 9) == 5.0\nassert sum_gp(1, 5, 3) == 121.0\nassert sum_gp(4, 10, 3) == 118096.0\nassert sum_gp(2, 1, 2) == 2.0\nassert sum_gp(2, 1, 5) == 2.0\nassert sum_gp(5, 7, 9) == 2989355.0\nassert sum_gp(1, 5, 7) == 2801.0\nassert sum_gp(3, 7, 6) == 167961.0\nassert sum_gp(4, 1, 9) == 4.0\nassert sum_gp(1, 6, 7) == 19608.0\nassert sum_gp(6, 5, 8) == 28086.0\nassert sum_gp(1, 9, 2) == 511.0\nassert sum_gp(3, 7, 3) == 3279.0\nassert sum_gp(4, 2, 4) == 20.0\nassert sum_gp(3, 1, 7) == 3.0\nassert sum_gp(5, 1, 5) == 5.0\nassert sum_gp(6, 11, 5) == 73242186.0\nassert sum_gp(2, 9, 5) == 976562.0\nassert sum_gp(3, 6, 6) == 27993.0\nassert sum_gp(3, 1, 6) == 3.0\nassert sum_gp(5, 3, 6) == 215.0\nassert sum_gp(2, 11, 7) == 659108914.0\nassert sum_gp(1, 4, 6) == 259.0\nassert sum_gp(4, 3, 6) == 172.0\nassert sum_gp(2, 9, 4) == 174762.0\nassert sum_gp(2, 2, 3) == 8.0\nassert sum_gp(1, 1, 7) == 1.0\nassert sum_gp(3, 9, 3) == 29523.0\nassert sum_gp(5, 1, 5) == 5.0\nassert sum_gp(5, 2, 2) == 15.0\nassert sum_gp(4, 6, 8) == 149796.0\nassert sum_gp(6, 9, 2) == 3066.0\nassert sum_gp(7, 2, 8) == 63.0\nassert sum_gp(7, 2, 8) == 63.0\nassert sum_gp(1, 1, 4) == 1.0\nassert sum_gp(4, 4, 6) == 1036.0\nassert sum_gp(3, 10, 6) == 36279705.0\nassert sum_gp(5, 10, 2) == 5115.0\nassert sum_gp(2, 10, 2) == 2046.0\nassert sum_gp(3, 4, 5) == 468.0\nassert sum_gp(5, 9, 5) == 2441405.0\nassert sum_gp(3, 10, 4) == 1048575.0\nassert sum_gp(7, 5, 3) == 847.0\nassert sum_gp(3, 3, 6) == 129.0\nassert sum_gp(4, 9, 5) == 1953124.0\nassert sum_gp(6, 6, 7) == 117648.0\nassert sum_gp(6, 8, 8) == 14380470.0\nassert sum_gp(2, 11, 3) == 177146.0", "solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"}
{"task_id": "375", "split": "train", "entry_point": "round_num", "prompt": "def round_num(n,m):\nWrite a function to round the given number to the nearest multiple of a specific number.", "prompt_cot": "def round_num(n,m):\nWrite a function to round the given number to the nearest multiple of a specific number.\n\nYou are a careful Python developer.\nFirst, reason step by step privately about the algorithm and tricky cases.\nThen, output ONLY valid Python code implementing `round_num` — no comments, no prints, no tests.", "prompt_self_planning": "def round_num(n,m):\nWrite a function to round the given number to the nearest multiple of a specific number.\n\nYou are a methodical Python engineer.\nBefore coding, make a brief plan in your head: inputs/outputs, edge cases, approach, and complexity.\nFinally, output ONLY the final Python code implementing `round_num` — no comments, no prints, no tests.", "tests": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218\nassert round_num(5091, 9) == 5094\nassert round_num(5326, 8) == 5328\nassert round_num(5141, 11) == 5137\nassert round_num(4194, 9) == 4194\nassert round_num(4406, 9) == 4410\nassert round_num(4821, 7) == 4823\nassert round_num(4141, 13) == 4147\nassert round_num(4945, 11) == 4950\nassert round_num(5182, 6) == 5184\nassert round_num(4787, 6) == 4788\nassert round_num(4099, 12) == 4104\nassert round_num(5152, 11) == 5148\nassert round_num(5669, 13) == 5668\nassert round_num(4550, 12) == 4548\nassert round_num(4959, 7) == 4956\nassert round_num(5318, 9) == 5319\nassert round_num(4914, 11) == 4917\nassert round_num(4006, 5) == 4005\nassert round_num(4834, 14) == 4830\nassert round_num(5003, 13) == 5005\nassert round_num(4989, 15) == 4995\nassert round_num(4787, 5) == 4785\nassert round_num(5581, 15) == 5580\nassert round_num(3947, 12) == 3948\nassert round_num(5208, 6) == 5208\nassert round_num(4300, 9) == 4302\nassert round_num(4308, 14) == 4312\nassert round_num(5583, 9) == 5580\nassert round_num(3800, 9) == 3798\nassert round_num(4179, 13) == 4173\nassert round_num(3719, 15) == 3720\nassert round_num(4335, 13) == 4329\nassert round_num(4846, 15) == 4845\nassert round_num(120, 4) == 120\nassert round_num(2064, 9) == 2061\nassert round_num(1603, 7) == 1603\nassert round_num(1338, 6) == 1338\nassert round_num(337, 8) == 336\nassert round_num(1352, 5) == 1350\nassert round_num(1713, 5) == 1715\nassert round_num(1057, 10) == 1060\nassert round_num(437, 7) == 434\nassert round_num(1821, 6) == 1818\nassert round_num(1486, 2) == 1486\nassert round_num(1134, 4) == 1132\nassert round_num(106, 9) == 108\nassert round_num(1399, 9) == 1395\nassert round_num(779, 2) == 778\nassert round_num(890, 5) == 890\nassert round_num(959, 6) == 960\nassert round_num(1189, 6) == 1188\nassert round_num(1587, 8) == 1584\nassert round_num(657, 10) == 660\nassert round_num(1804, 8) == 1800\nassert round_num(1016, 9) == 1017\nassert round_num(850, 4) == 848\nassert round_num(1862, 10) == 1860\nassert round_num(1860, 4) == 1860\nassert round_num(488, 7) == 490\nassert round_num(582, 10) == 580\nassert round_num(375, 7) == 378\nassert round_num(1624, 6) == 1626\nassert round_num(908, 10) == 910\nassert round_num(747, 2) == 746\nassert round_num(1637, 7) == 1638\nassert round_num(106, 10) == 110\nassert round_num(215, 3) == 216\nassert round_num(222, 6) == 222\nassert round_num(219, 3) == 219\nassert round_num(222, 1) == 222\nassert round_num(219, 1) == 219\nassert round_num(218, 4) == 216\nassert round_num(221, 2) == 220\nassert round_num(220, 2) == 220\nassert round_num(214, 4) == 212\nassert round_num(214, 5) == 215\nassert round_num(223, 1) == 223\nassert round_num(219, 3) == 219\nassert round_num(221, 5) == 220\nassert round_num(219, 1) == 219\nassert round_num(218, 5) == 220\nassert round_num(217, 3) == 216\nassert round_num(221, 1) == 221\nassert round_num(219, 2) == 218\nassert round_num(223, 6) == 222\nassert round_num(223, 2) == 222\nassert round_num(217, 1) == 217\nassert round_num(222, 6) == 222\nassert round_num(216, 4) == 216\nassert round_num(219, 4) == 220\nassert round_num(221, 5) == 220\nassert round_num(217, 4) == 216\nassert round_num(222, 7) == 224\nassert round_num(215, 6) == 216\nassert round_num(215, 1) == 215\nassert round_num(221, 3) == 222\nassert round_num(217, 5) == 215\nassert round_num(214, 2) == 214\nassert round_num(216, 6) == 216", "solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"}
